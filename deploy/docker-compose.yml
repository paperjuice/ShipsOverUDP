---
version: '3.9'

services:
  # --------------------- #
  # --- Load Balancer --- #
  # --------------------- #
  lb:
    image: nginx
    tty: true
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/nginx.conf
        read_only: false
    depends_on:
      ships_over_udp-1:
        condition: service_started
      ships_over_udp-2:
        condition: service_started
    ports:
      - "2052:2052/udp"
      - "4000:4000"
    networks:
      - ships_over_udp_network

  # --------------------- #
  # ---- Cassandra DB ----#
  # --------------------- #
  cas_dev:
    image: cassandra:4.0
    tty: true
    environment:
      - CASSANDRA_CLUSTER_NAME=ships_over_dns
    ports:
      - "9042-9043:9042"
    networks:
      - ships_over_udp_network
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 10s
      timeout: 10s
      retries: 10

  # --------------------- #
  # ------- Kafka ------- #
  # --------------------- #
  zookeeper:
    platform: linux/amd64
    tty: true
    image: confluentinc/cp-zookeeper:${CONFLUENT_PLATFORM_VERSION:-7.4.0}
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - '32181:32181'
      - '2888:2888'
      - '3888:3888'
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    healthcheck:
      test: echo stat | nc localhost 32181
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - ships_over_udp_network

  broker-1:
    platform: linux/amd64
    tty: true
    image: confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-7.4.0}
    container_name: broker-1
    restart: unless-stopped
    ports:
      - '9091:9091'
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-1:29091,EXTERNAL://${BROKER_DOMAIN_1}:9091
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_JMX_PORT: 19101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    healthcheck:
      test: nc -vz ${BROKER_DOMAIN_1} 9091
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - ships_over_udp_network

  broker-2:
    platform: linux/amd64
    tty: true
    image: confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-7.4.0}
    container_name: broker-2
    restart: unless-stopped
    ports:
      - '9092:9092'
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker-2:29092,EXTERNAL://${BROKER_DOMAIN_2}:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_JMX_PORT: 19102
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    healthcheck:
      test: nc -vz ${BROKER_DOMAIN_2} 9092
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - ships_over_udp_network

  kafka-init:
    image: docker.io/bitnami/kafka:3
    tty: true
    networks:
      - ships_over_udp_network
    command: [ "/bin/bash", "-c", "/create_kafka_topic.sh"]
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2888:3888
      - TEST_TOPIC_NAME=vessels
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./create_kafka_topic.sh
        target: /create_kafka_topic.sh
    init: true

  # --------------------- #
  # ------ MAIN APP ----- #
  # --------------------- #
  ships_over_udp-1:
    container_name: "ships_over_udp-1"
    tty: true
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
      cas_dev:
        condition: service_healthy
    build:
      dockerfile: ./deploy/Dockerfile
      context: ../.
      no_cache: false
    environment:
      UPD_PORT: "2052"
      HTTP_PORT: "4000"
      DOMAIN_BROKER_1: "broker-1"
      DOMAIN_BROKER_2: "broker-2"
      CASSANDRA_DB_DOMAIN: "cas_dev"
    networks:
      - ships_over_udp_network

  ships_over_udp-2:
    container_name: "ships_over_udp-2"
    tty: true
    depends_on:
      broker-1:
        condition: service_healthy
      broker-2:
        condition: service_healthy
      cas_dev:
        condition: service_healthy
    build:
      dockerfile: ./deploy/Dockerfile
      context: ../.
      no_cache: false
    environment:
      UPD_PORT: "2053"
      HTTP_PORT: "4001"
      DOMAIN_BROKER_1: "broker-1"
      DOMAIN_BROKER_2: "broker-2"
      CASSANDRA_DB_DOMAIN: "cas_dev"
    networks:
      - ships_over_udp_network


  # --------------------- #
  # ------ Network ------ #
  # --------------------- #
networks:
  ships_over_udp_network:
    name: ships_over_udp_network
